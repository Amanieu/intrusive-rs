var searchIndex = JSON.parse('{\
"intrusive_collections":{"doc":"Intrusive collections for Rust.","i":[[14,"offset_of","intrusive_collections","Calculates the offset of the specified field from the…",null,null],[3,"DefaultPointerOps","","The `PointerOps` type used by an `Adapter` generated by…",null,null],[3,"UnsafeRef","","Unchecked shared pointer",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",0,null],[11,"from_raw","","Creates an `UnsafeRef` from a raw pointer",1,[[],["unsaferef",3]]],[11,"into_raw","","Converts an `UnsafeRef` into a raw pointer",1,[[]]],[11,"from_box","","Creates an `UnsafeRef` from a `Box`",1,[[["box",3]],["unsaferef",3]]],[11,"into_box","","Converts an `UnsafeRef` into a `Box`",1,[[],["box",3]]],[11,"new","","Constructs an instance of `DefaultPointerOps`.",2,[[],["defaultpointerops",3]]],[0,"linked_list","","Intrusive doubly-linked list.",null,null],[3,"Link","intrusive_collections::linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"LinkOps","","Default `LinkOps` implementation for `LinkedList`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a `LinkedList`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `LinkedList`.",null,null],[3,"LinkedList","","An intrusive doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator which consumes a `LinkedList`.",null,null],[8,"LinkedListOps","","Link operations for `LinkedList`.",null,null],[10,"next","","Returns the \\\"next\\\" link pointer of `ptr`.",3,[[],["option",4]]],[10,"prev","","Returns the \\\"prev\\\" link pointer of `ptr`.",3,[[],["option",4]]],[10,"set_next","","Sets the \\\"next\\\" link pointer of `ptr`.",3,[[["option",4]]]],[10,"set_prev","","Sets the \\\"prev\\\" link pointer of `ptr`.",3,[[["option",4]]]],[11,"new","","Creates a new `Link`.",4,[[],["link",3]]],[11,"is_linked","","Checks whether the `Link` is linked into a `LinkedList`.",4,[[]]],[11,"force_unlink","","Forcibly unlinks an object from a `LinkedList`.",4,[[]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",5,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",5,[[],["option",4]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",5,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",5,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the…",5,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",5,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",5,[[],["cursor",3]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",6,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",6,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",6,[[],["cursor",3]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",6,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the…",6,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",6,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",6,[[],["cursor",3]]],[11,"remove","","Removes the current element from the `LinkedList`.",6,[[],["option",4]]],[11,"replace_with","","Removes the current element from the `LinkedList` and…",6,[[],["result",4]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",6,[[]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",6,[[]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",6,[[["linkedlist",3]]]],[11,"splice_before","","Moves all element from the given `LinkedList` before the…",6,[[["linkedlist",3]]]],[11,"split_after","","Splits the list into two after the current element. This…",6,[[],["linkedlist",3]]],[11,"split_before","","Splits the list into two before the current element. This…",6,[[],["linkedlist",3]]],[11,"new","","Creates an empty `LinkedList`.",7,[[],["linkedlist",3]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",7,[[]]],[11,"cursor","","Returns a null `Cursor` for this list.",7,[[],["cursor",3]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",7,[[],["cursormut",3]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",7,[[],["cursor",3]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",7,[[],["cursormut",3]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",7,[[],["cursor",3]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",7,[[],["cursormut",3]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",7,[[],["cursor",3]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",7,[[],["cursormut",3]]],[11,"iter","","Gets an iterator over the objects in the `LinkedList`.",7,[[],["iter",3]]],[11,"clear","","Removes all elements from the `LinkedList`.",7,[[]]],[11,"fast_clear","","Empties the `LinkedList` without unlinking or freeing…",7,[[]]],[11,"take","","Takes all the elements out of the `LinkedList`, leaving it…",7,[[],["linkedlist",3]]],[11,"push_front","","Inserts a new element at the start of the `LinkedList`.",7,[[]]],[11,"push_back","","Inserts a new element at the end of the `LinkedList`.",7,[[]]],[11,"pop_front","","Removes the first element of the `LinkedList`.",7,[[],["option",4]]],[11,"pop_back","","Removes the last element of the `LinkedList`.",7,[[],["option",4]]],[0,"rbtree","intrusive_collections","Intrusive red-black tree.",null,null],[3,"Link","intrusive_collections::rbtree","Intrusive link that allows an object to be inserted into a…",null,null],[3,"LinkOps","","Default `LinkOps` implementation for `RBTree`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a `RBTree`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `RBTree`.",null,null],[3,"RBTree","","An intrusive red-black tree.",null,null],[3,"InsertCursor","","A cursor pointing to a slot in which an element can be…",null,null],[3,"Iter","","An iterator over references to the items of a `RBTree`.",null,null],[3,"IntoIter","","An iterator which consumes a `RBTree`.",null,null],[4,"Color","","The color of a red-black tree node.",null,null],[13,"Red","","",8,null],[13,"Black","","",8,null],[4,"Entry","","An entry in a `RBTree`.",null,null],[13,"Occupied","","An occupied entry.",9,null],[13,"Vacant","","A vacant entry.",9,null],[8,"RBTreeOps","","Link operations for `RBTree`.",null,null],[10,"left","","Returns the left child of `ptr`.",10,[[],["option",4]]],[10,"right","","Returns the right child of `ptr`.",10,[[],["option",4]]],[10,"parent","","Returns the parent of `ptr`.",10,[[],["option",4]]],[10,"color","","Returns the color of `ptr`.",10,[[],["color",4]]],[10,"set_left","","Sets the left child of `ptr`.",10,[[["option",4]]]],[10,"set_right","","Sets the right child of `ptr`.",10,[[["option",4]]]],[10,"set_parent","","Sets the parent of `ptr`.",10,[[["option",4]]]],[10,"set_color","","Sets the color of `ptr`.",10,[[["color",4]]]],[11,"new","","Creates a new `Link`.",11,[[],["link",3]]],[11,"is_linked","","Checks whether the `Link` is linked into a `RBTree`.",11,[[]]],[11,"force_unlink","","Forcibly unlinks an object from a `RBTree`.",11,[[]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",12,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",12,[[],["option",4]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",12,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",12,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",12,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",12,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",12,[[],["cursor",3]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",13,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",13,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",13,[[],["cursor",3]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",13,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",13,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",13,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",13,[[],["cursor",3]]],[11,"remove","","Removes the current element from the `RBTree`.",13,[[],["option",4]]],[11,"replace_with","","Removes the current element from the `RBTree` and inserts…",13,[[],["result",4]]],[11,"insert_after","","Inserts a new element into the `RBTree` after the current…",13,[[]]],[11,"insert_before","","Inserts a new element into the `RBTree` before the current…",13,[[]]],[11,"insert","","Inserts a new element into the `RBTree`.",13,[[]]],[11,"new","","Creates an empty `RBTree`.",14,[[],["rbtree",3]]],[11,"is_empty","","Returns `true` if the `RBTree` is empty.",14,[[]]],[11,"cursor","","Returns a null `Cursor` for this tree.",14,[[],["cursor",3]]],[11,"cursor_mut","","Returns a null `CursorMut` for this tree.",14,[[],["cursormut",3]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",14,[[],["cursor",3]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",14,[[],["cursormut",3]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",14,[[],["cursor",3]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",14,[[],["cursormut",3]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",14,[[],["cursor",3]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",14,[[],["cursormut",3]]],[11,"iter","","Gets an iterator over the objects in the `RBTree`.",14,[[],["iter",3]]],[11,"clear","","Removes all elements from the `RBTree`.",14,[[]]],[11,"fast_clear","","Empties the `RBTree` without unlinking or freeing objects…",14,[[]]],[11,"take","","Takes all the elements out of the `RBTree`, leaving it…",14,[[],["rbtree",3]]],[11,"find","","Returns a `Cursor` pointing to an element with the given…",14,[[],["cursor",3]]],[11,"find_mut","","Returns a `CursorMut` pointing to an element with the…",14,[[],["cursormut",3]]],[11,"lower_bound","","Returns a `Cursor` pointing to the lowest element whose…",14,[[["bound",4]],["cursor",3]]],[11,"lower_bound_mut","","Returns a `CursorMut` pointing to the first element whose…",14,[[["bound",4]],["cursormut",3]]],[11,"upper_bound","","Returns a `Cursor` pointing to the last element whose key…",14,[[["bound",4]],["cursor",3]]],[11,"upper_bound_mut","","Returns a `CursorMut` pointing to the last element whose…",14,[[["bound",4]],["cursormut",3]]],[11,"insert","","Inserts a new element into the `RBTree`.",14,[[],["cursormut",3]]],[11,"entry","","Returns an `Entry` for the given key which contains a…",14,[[],["entry",4]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",14,[[["bound",4],["bound",4]],["iter",3]]],[11,"insert","","Inserts a new element into the `RBTree` at the location…",15,[[],["cursormut",3]]],[11,"or_insert","","Inserts an element into the `RBTree` if the entry is…",9,[[],["cursormut",3]]],[11,"or_insert_with","","Calls the given function and inserts the result into the…",9,[[],["cursormut",3]]],[0,"singly_linked_list","intrusive_collections","Intrusive singly-linked list.",null,null],[3,"Link","intrusive_collections::singly_linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"LinkOps","","Default `LinkOps` implementation for `SinglyLinkedList`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a…",null,null],[3,"CursorMut","","A cursor which provides mutable access to a…",null,null],[3,"SinglyLinkedList","","An intrusive singly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a…",null,null],[3,"IntoIter","","An iterator which consumes a `SinglyLinkedList`.",null,null],[8,"SinglyLinkedListOps","","Link operations for `SinglyLinkedList`.",null,null],[10,"next","","Returns the \\\"next\\\" link pointer of `ptr`.",16,[[],["option",4]]],[10,"set_next","","Sets the \\\"next\\\" link pointer of `ptr`.",16,[[["option",4]]]],[11,"new","","Creates a new `Link`.",17,[[],["link",3]]],[11,"is_linked","","Checks whether the `Link` is linked into a…",17,[[]]],[11,"force_unlink","","Forcibly unlinks an object from a `SinglyLinkedList`.",17,[[]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",18,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",18,[[],["option",4]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",18,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the…",18,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",18,[[],["cursor",3]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",19,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",19,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",19,[[],["cursor",3]]],[11,"move_next","","Moves the cursor to the next element of the…",19,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",19,[[],["cursor",3]]],[11,"remove_next","","Removes the next element from the `SinglyLinkedList`.",19,[[],["option",4]]],[11,"replace_next_with","","Removes the next element from the `SinglyLinkedList` and…",19,[[],["result",4]]],[11,"insert_after","","Inserts a new element into the `SinglyLinkedList` after…",19,[[]]],[11,"splice_after","","Inserts the elements from the given `SinglyLinkedList`…",19,[[["singlylinkedlist",3]]]],[11,"split_after","","Splits the list into two after the current element. This…",19,[[],["singlylinkedlist",3]]],[11,"new","","Creates an empty `SinglyLinkedList`.",20,[[],["singlylinkedlist",3]]],[11,"is_empty","","Returns `true` if the `SinglyLinkedList` is empty.",20,[[]]],[11,"cursor","","Returns a null `Cursor` for this list.",20,[[],["cursor",3]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",20,[[],["cursormut",3]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",20,[[],["cursor",3]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",20,[[],["cursormut",3]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",20,[[],["cursor",3]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",20,[[],["cursormut",3]]],[11,"iter","","Gets an iterator over the objects in the `SinglyLinkedList`.",20,[[],["iter",3]]],[11,"clear","","Removes all elements from the `SinglyLinkedList`.",20,[[]]],[11,"fast_clear","","Empties the `SinglyLinkedList` without unlinking or…",20,[[]]],[11,"take","","Takes all the elements out of the `SinglyLinkedList`,…",20,[[],["singlylinkedlist",3]]],[11,"push_front","","Inserts a new element at the start of the…",20,[[]]],[11,"pop_front","","Removes the first element of the `SinglyLinkedList`.",20,[[],["option",4]]],[0,"xor_linked_list","intrusive_collections","Intrusive xor doubly-linked list which uses less memory…",null,null],[3,"Link","intrusive_collections::xor_linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"LinkOps","","Default `LinkOps` implementation for `XorLinkedList`.",null,null],[3,"Cursor","","A cursor which provides read-only access to a…",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `XorLinkedList`.",null,null],[3,"XorLinkedList","","Intrusive xor doubly-linked list which uses less memory…",null,null],[3,"Iter","","An iterator over references to the items of a…",null,null],[3,"IntoIter","","An iterator which consumes a `XorLinkedList`.",null,null],[8,"XorLinkedListOps","","Link operations for `XorLinkedList`.",null,null],[10,"next","","Returns the \\\"next\\\" link pointer of `ptr`.",21,[[["option",4]],["option",4]]],[10,"prev","","Returns the \\\"prev\\\" link pointer of `ptr`.",21,[[["option",4]],["option",4]]],[10,"set","","Assigns the \\\"prev\\\" and \\\"next\\\" link pointers of `ptr`.",21,[[["option",4]]]],[10,"replace_next_or_prev","","Replaces the \\\"next\\\" or \\\"prev\\\" link pointer of `ptr`.",21,[[["option",4]]]],[11,"new","","Creates a new `Link`.",22,[[],["link",3]]],[11,"is_linked","","Checks whether the `Link` is linked into a `XorLinkedList`.",22,[[]]],[11,"force_unlink","","Forcibly unlinks an object from a `XorLinkedList`.",22,[[]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",23,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",23,[[],["option",4]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",23,[[],["option",4]]],[11,"move_next","","Moves the cursor to the next element of the `XorLinkedList`.",23,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the…",23,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",23,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",23,[[],["cursor",3]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",24,[[]]],[11,"get","","Returns a reference to the object that the cursor is…",24,[[],["option",4]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",24,[[],["cursor",3]]],[11,"move_next","","Moves the cursor to the next element of the `XorLinkedList`.",24,[[]]],[11,"move_prev","","Moves the cursor to the previous element of the…",24,[[]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",24,[[],["cursor",3]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",24,[[],["cursor",3]]],[11,"remove","","Removes the current element from the `XorLinkedList`.",24,[[],["option",4]]],[11,"replace_with","","Removes the current element from the `XorLinkedList` and…",24,[[],["result",4]]],[11,"insert_after","","Inserts a new element into the `XorLinkedList` after the…",24,[[]]],[11,"insert_before","","Inserts a new element into the `XorLinkedList` before the…",24,[[]]],[11,"splice_after","","Inserts the elements from the given `XorLinkedList` after…",24,[[["xorlinkedlist",3]]]],[11,"splice_before","","Moves all element from the given `XorLinkedList` before…",24,[[["xorlinkedlist",3]]]],[11,"split_after","","Splits the list into two after the current element. This…",24,[[],["xorlinkedlist",3]]],[11,"split_before","","Splits the list into two before the current element. This…",24,[[],["xorlinkedlist",3]]],[11,"new","","Creates an empty `XorLinkedList`.",25,[[],["xorlinkedlist",3]]],[11,"is_empty","","Returns `true` if the `XorLinkedList` is empty.",25,[[]]],[11,"cursor","","Returns a null `Cursor` for this list.",25,[[],["cursor",3]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",25,[[],["cursormut",3]]],[11,"cursor_from_ptr_and_prev","","Creates a `Cursor` from a pointer to an element and a…",25,[[],["cursor",3]]],[11,"cursor_mut_from_ptr_and_prev","","Creates a `CursorMut` from a pointer to an element and a…",25,[[],["cursormut",3]]],[11,"cursor_from_ptr_and_next","","Creates a `Cursor` from a pointer to an element and a…",25,[[],["cursor",3]]],[11,"cursor_mut_from_ptr_and_next","","Creates a `CursorMut` from a pointer to an element and a…",25,[[],["cursormut",3]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",25,[[],["cursor",3]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",25,[[],["cursormut",3]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",25,[[],["cursor",3]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",25,[[],["cursormut",3]]],[11,"iter","","Gets an iterator over the objects in the `XorLinkedList`.",25,[[],["iter",3]]],[11,"clear","","Removes all elements from the `XorLinkedList`.",25,[[]]],[11,"fast_clear","","Empties the `XorLinkedList` without unlinking or freeing…",25,[[]]],[11,"take","","Takes all the elements out of the `XorLinkedList`, leaving…",25,[[],["xorlinkedlist",3]]],[11,"push_front","","Inserts a new element at the start of the `XorLinkedList`.",25,[[]]],[11,"push_back","","Inserts a new element at the end of the `XorLinkedList`.",25,[[]]],[11,"pop_front","","Removes the first element of the `XorLinkedList`.",25,[[],["option",4]]],[11,"pop_back","","Removes the last element of the `XorLinkedList`.",25,[[],["option",4]]],[11,"reverse","","Reverses the list in-place.",25,[[]]],[8,"Adapter","intrusive_collections","Trait for a adapter which allows a type to be inserted…",null,null],[16,"LinkOps","","Collection-specific link operations which allow an object…",26,null],[16,"PointerOps","","Collection-specific pointer conversions which allow an…",26,null],[10,"get_value","","Gets a reference to an object from a reference to a link…",26,[[]]],[10,"get_link","","Gets a reference to the link for the given object.",26,[[]]],[10,"link_ops","","Returns a reference to the link operations.",26,[[]]],[10,"link_ops_mut","","Returns a reference to the mutable link operations.",26,[[]]],[10,"pointer_ops","","Returns a reference to the pointer converter.",26,[[]]],[8,"KeyAdapter","","Extension of the `Adapter` trait to provide a way of…",null,null],[16,"Key","","Type of the key returned by `get_key`.",27,null],[10,"get_key","","Gets the key for the given object.",27,[[]]],[8,"DefaultLinkOps","","The default implementation of `LinkOps` associated with a…",null,null],[16,"Ops","","The default link operations.",28,null],[18,"NEW","","The associated constant that represents `Ops::default()`.",28,null],[8,"LinkOps","","Base trait for link operations.",null,null],[16,"LinkPtr","","The link pointer type.",29,null],[10,"acquire_link","","Attempts to acquire ownership of a link so that it can be…",29,[[]]],[10,"release_link","","Releases ownership of a link that was previously acquired…",29,[[]]],[8,"PointerOps","","Trait for pointer conversion operations.",null,null],[16,"Value","","Object type which is inserted into an intrusive collection.",30,null],[16,"Pointer","","Pointer type which owns an instance of a value.",30,null],[10,"from_raw","","Constructs an owned pointer from a raw pointer.",30,[[]]],[10,"into_raw","","Consumes the owned pointer and returns a raw pointer to…",30,[[]]],[14,"container_of","","Unsafe macro to get a raw pointer to an outer object from…",null,null],[14,"intrusive_adapter","","Macro to generate an implementation of `Adapter` for a…",null,null],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","intrusive_collections::linked_list","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into_iter","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","intrusive_collections::rbtree","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"from","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","intrusive_collections::singly_linked_list","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"from","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"from","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"from","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into_iter","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into_iter","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","intrusive_collections::xor_linked_list","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"from","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"from","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into_iter","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"acquire_link","intrusive_collections::linked_list","",31,[[]]],[11,"release_link","","",31,[[]]],[11,"acquire_link","intrusive_collections::rbtree","",34,[[]]],[11,"release_link","","",34,[[]]],[11,"acquire_link","intrusive_collections::singly_linked_list","",37,[[]]],[11,"release_link","","",37,[[]]],[11,"acquire_link","intrusive_collections::xor_linked_list","",40,[[]]],[11,"release_link","","",40,[[]]],[11,"from_raw","intrusive_collections","",2,[[]]],[11,"into_raw","","",2,[[]]],[11,"from_raw","","",2,[[],["unsaferef",3]]],[11,"into_raw","","",2,[[["unsaferef",3]]]],[11,"from_raw","","",2,[[],["box",3]]],[11,"into_raw","","",2,[[["box",3]]]],[11,"from_raw","","",2,[[],["rc",3]]],[11,"into_raw","","",2,[[["rc",3]]]],[11,"from_raw","","",2,[[],["arc",3]]],[11,"into_raw","","",2,[[["arc",3]]]],[11,"next","intrusive_collections::linked_list","",31,[[],["option",4]]],[11,"prev","","",31,[[],["option",4]]],[11,"set_next","","",31,[[["option",4]]]],[11,"set_prev","","",31,[[["option",4]]]],[11,"next","intrusive_collections::rbtree","",34,[[],["option",4]]],[11,"prev","","",34,[[],["option",4]]],[11,"set_next","","",34,[[["option",4]]]],[11,"set_prev","","",34,[[["option",4]]]],[11,"left","","",34,[[],["option",4]]],[11,"right","","",34,[[],["option",4]]],[11,"parent","","",34,[[],["option",4]]],[11,"color","","",34,[[],["color",4]]],[11,"set_left","","",34,[[["option",4]]]],[11,"set_right","","",34,[[["option",4]]]],[11,"set_parent","","",34,[[["option",4]]]],[11,"set_color","","",34,[[["color",4]]]],[11,"next","intrusive_collections::linked_list","",31,[[],["option",4]]],[11,"set_next","","",31,[[["option",4]]]],[11,"next","intrusive_collections::rbtree","",34,[[],["option",4]]],[11,"set_next","","",34,[[["option",4]]]],[11,"next","intrusive_collections::singly_linked_list","",37,[[],["option",4]]],[11,"set_next","","",37,[[["option",4]]]],[11,"next","intrusive_collections::xor_linked_list","",40,[[],["option",4]]],[11,"set_next","","",40,[[["option",4]]]],[11,"next","intrusive_collections::linked_list","",31,[[["option",4]],["option",4]]],[11,"prev","","",31,[[["option",4]],["option",4]]],[11,"set","","",31,[[["option",4]]]],[11,"replace_next_or_prev","","",31,[[["option",4]]]],[11,"next","intrusive_collections::rbtree","",34,[[["option",4]],["option",4]]],[11,"prev","","",34,[[["option",4]],["option",4]]],[11,"set","","",34,[[["option",4]]]],[11,"replace_next_or_prev","","",34,[[["option",4]]]],[11,"next","intrusive_collections::singly_linked_list","",37,[[["option",4]],["option",4]]],[11,"prev","","",37,[[["option",4]],["option",4]]],[11,"set","","",37,[[["option",4]]]],[11,"replace_next_or_prev","","",37,[[["option",4]]]],[11,"next","intrusive_collections::xor_linked_list","",40,[[["option",4]],["option",4]]],[11,"prev","","",40,[[["option",4]],["option",4]]],[11,"set","","",40,[[["option",4]]]],[11,"replace_next_or_prev","","",40,[[["option",4]]]],[11,"deref","intrusive_collections","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","intrusive_collections::linked_list","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","intrusive_collections::rbtree","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","intrusive_collections::singly_linked_list","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","intrusive_collections::xor_linked_list","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","intrusive_collections","",0,[[["formatter",3]],["result",6]]],[11,"eq","intrusive_collections::rbtree","",8,[[["color",4]]]],[11,"eq","intrusive_collections","",0,[[["bound",4]]]],[11,"ne","","",0,[[["bound",4]]]],[11,"drop","intrusive_collections::linked_list","",7,[[]]],[11,"drop","intrusive_collections::rbtree","",14,[[]]],[11,"drop","intrusive_collections::singly_linked_list","",20,[[]]],[11,"drop","intrusive_collections::xor_linked_list","",25,[[]]],[11,"hash","intrusive_collections","",0,[[]]],[11,"next","intrusive_collections::linked_list","",32,[[],["option",4]]],[11,"next","","",33,[[],["option",4]]],[11,"next","intrusive_collections::rbtree","",35,[[],["option",4]]],[11,"next","","",36,[[],["option",4]]],[11,"next","intrusive_collections::singly_linked_list","",38,[[],["option",4]]],[11,"next","","",39,[[],["option",4]]],[11,"next","intrusive_collections::xor_linked_list","",41,[[],["option",4]]],[11,"next","","",42,[[],["option",4]]],[11,"next_back","intrusive_collections::linked_list","",32,[[],["option",4]]],[11,"next_back","","",33,[[],["option",4]]],[11,"next_back","intrusive_collections::rbtree","",35,[[],["option",4]]],[11,"next_back","","",36,[[],["option",4]]],[11,"next_back","intrusive_collections::xor_linked_list","",41,[[],["option",4]]],[11,"next_back","","",42,[[],["option",4]]],[11,"into_iter","intrusive_collections::linked_list","",7,[[],["intoiter",3]]],[11,"into_iter","intrusive_collections::rbtree","",14,[[],["intoiter",3]]],[11,"into_iter","intrusive_collections::singly_linked_list","",20,[[],["intoiter",3]]],[11,"into_iter","intrusive_collections::xor_linked_list","",25,[[],["intoiter",3]]],[11,"as_ref","intrusive_collections","",1,[[]]],[11,"clone","","",1,[[],["unsaferef",3]]],[11,"clone","","",2,[[]]],[11,"clone","intrusive_collections::linked_list","",4,[[],["link",3]]],[11,"clone","","",31,[[],["linkops",3]]],[11,"clone","","",5,[[],["cursor",3]]],[11,"clone","","",32,[[],["iter",3]]],[11,"clone","intrusive_collections::rbtree","",8,[[],["color",4]]],[11,"clone","","",11,[[],["link",3]]],[11,"clone","","",34,[[],["linkops",3]]],[11,"clone","","",12,[[],["cursor",3]]],[11,"clone","","",35,[[],["iter",3]]],[11,"clone","intrusive_collections::singly_linked_list","",17,[[],["link",3]]],[11,"clone","","",37,[[],["linkops",3]]],[11,"clone","","",18,[[],["cursor",3]]],[11,"clone","","",38,[[],["iter",3]]],[11,"clone","intrusive_collections::xor_linked_list","",22,[[],["link",3]]],[11,"clone","","",40,[[],["linkops",3]]],[11,"clone","","",23,[[],["cursor",3]]],[11,"clone","","",41,[[],["iter",3]]],[11,"clone","intrusive_collections","",0,[[],["bound",4]]],[11,"default","","",2,[[]]],[11,"default","intrusive_collections::linked_list","",4,[[],["link",3]]],[11,"default","","",31,[[],["linkops",3]]],[11,"default","","",7,[[],["linkedlist",3]]],[11,"default","intrusive_collections::rbtree","",11,[[],["link",3]]],[11,"default","","",34,[[],["linkops",3]]],[11,"default","","",14,[[],["rbtree",3]]],[11,"default","intrusive_collections::singly_linked_list","",17,[[],["link",3]]],[11,"default","","",37,[[],["linkops",3]]],[11,"default","","",20,[[],["singlylinkedlist",3]]],[11,"default","intrusive_collections::xor_linked_list","",22,[[],["link",3]]],[11,"default","","",40,[[],["linkops",3]]],[11,"default","","",25,[[],["xorlinkedlist",3]]],[11,"borrow","intrusive_collections","",1,[[]]],[18,"NEW","","The associated constant that represents `Ops::default()`.",28,null]],"p":[[4,"Bound"],[3,"UnsafeRef"],[3,"DefaultPointerOps"],[8,"LinkedListOps"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedList"],[4,"Color"],[4,"Entry"],[8,"RBTreeOps"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"RBTree"],[3,"InsertCursor"],[8,"SinglyLinkedListOps"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"SinglyLinkedList"],[8,"XorLinkedListOps"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"XorLinkedList"],[8,"Adapter"],[8,"KeyAdapter"],[8,"DefaultLinkOps"],[8,"LinkOps"],[8,"PointerOps"],[3,"LinkOps"],[3,"Iter"],[3,"IntoIter"],[3,"LinkOps"],[3,"Iter"],[3,"IntoIter"],[3,"LinkOps"],[3,"Iter"],[3,"IntoIter"],[3,"LinkOps"],[3,"Iter"],[3,"IntoIter"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and…","i":[[14,"raw_field","memoffset","Computes a const raw pointer to the given field of the…",null,null],[14,"offset_of","","Calculates the offset of the specified field from the…",null,null],[14,"span_of","","Produces a range instance representing the sub-slice…",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
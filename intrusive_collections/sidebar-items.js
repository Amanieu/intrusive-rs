initSidebarItems({"enum":[["Bound","An endpoint of a range of keys."]],"macro":[["container_of","Unsafe macro to get a raw pointer to an outer object from a pointer to one of its fields."],["intrusive_adapter","Macro to generate an implementation of `Adapter` for a given set of types. In particular this will automatically generate implementations of the `get_value` and `get_link` methods for a given named field in a struct."],["offset_of","Calculates the offset of the specified field from the start of the struct."]],"mod":[["linked_list","Intrusive doubly-linked list."],["rbtree","Intrusive red-black tree."],["singly_linked_list","Intrusive singly-linked list."],["xor_linked_list","Intrusive xor doubly-linked list which uses less memory than a regular doubly linked list."]],"struct":[["DefaultPointerOps","The `PointerOps` type used by an `Adapter` generated by `intrusive_adapter!`."],["UnsafeRef","Unchecked shared pointer"]],"trait":[["Adapter","Trait for a adapter which allows a type to be inserted into an intrusive collection."],["DefaultLinkOps","The default implementation of `LinkOps` associated with a link type."],["KeyAdapter","Extension of the `Adapter` trait to provide a way of extracting a key from an object. This key can then be used as an index in certain intrusive collections (currently only `RBTree` uses this)."],["LinkOps","Base trait for link operations."],["PointerOps","Trait for pointer conversion operations."]]});